@model DanceStudioFinder.ViewModels.CreateScheduleStudioViewModel

@{
    ViewData["Title"] = "Добавление групп и их расписания";
}
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Поиск танцевальных студий</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/adminStudio.css" asp-append-version="true" />
</head>

@section AdminInfo {
    @($"Администратор: {Model.Admin.Name} {Model.Admin.Surname}")
    <button type="button" id="deleteAdmin" class="main-button">
        Удалить администратора
    </button>
}
@section HeaderButtons {
    <button type="button" id="buttonToSaveChanges" class="main-button">
        Сохранить
    </button>
    <input class="main-button" type="submit" onclick="location.href ='@Url.Action("Index", "Home")'" value="Выйти" />
}

<body>
    <form class="needs-validation" novalidate asp-controller="AdminStudio" asp-action="CreateScheduleStudio" method="post">
        <input type="hidden" asp-for="Admin.IdAdmin" />
        <input type="hidden" asp-for="DanceStudio.IdStudio" />

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="container-fluid px-3">
            <span class="field-title">Группы</span>
            <div id="group-container" class="mb-3">
                <!-- Первая группа -->
                <div class="group-row border p-3 rounded mb-3" id="groupRow0">

                    <!--Название группы-->
                    <div class="form-floating mb-3 validation">
                        <input asp-for="Groups[0].Name" class="form-control" style="border: 1px solid #F7C9D4;" placeholder="Название группы" required />
                        <label style="color: #BABABA;">Название группы</label>
                        <span asp-validation-for="Groups[0].Name" class="text-danger"></span>
                    </div>

                    <!--Танцевальное направление-->
                    <label>Направление</label>
                    <select name="Groups[0].StyleId" style="border: 1px solid #F7C9D4;" class="form-select mb-3" required>
                        @foreach (var style in Model.Styles)
                        {
                            <option value="@style.IdStyle">
                                @(style.NameEng != null && style.NameRus != null ? $"{style.NameEng} ({style.NameRus})" : style.NameEng ?? style.NameRus)
                            </option>
                        }
                    </select>

                    <!--Возрастное ограничение группы-->
                    <label>Возрастное ограничение</label>
                    <div class="row mb-3">
                        <div class="col">
                            <div class="form-floating">
                                <input asp-for="Groups[0].MinAge" type="text" class="form-control" style="border: 1px solid #F7C9D4;" placeholder="От" />
                                <label style="color: #BABABA;">От</label>
                                <span asp-validation-for="Groups[0].MinAge" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-floating">
                                <input asp-for="Groups[0].MaxAge" type="text" class="form-control" style="border: 1px solid #F7C9D4;" placeholder="До" />
                                <label style="color: #BABABA;">До</label>
                                <span asp-validation-for="Groups[0].MaxAge" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <!--Описание группы-->
                    <div class="form-floating mb-3">
                        <textarea asp-for="Groups[0].Description" class="form-control" style="height: 100px; border: 1px solid #F7C9D4;"></textarea>
                        <label style="color: #BABABA;">Описание</label>
                    </div>

                    <div class="schedule-container">
                        <!-- Расписания будут добавляться сюда -->
                    </div>
                    <button type="button" class="btn btn-outline-secondary" onclick="addDayField(this, 0)">+ Добавить день</button>
                </div>
            </div>

            <button type="button" class="btn btn-outline-primary" onclick="addGroup()">+ Добавить группу</button>
        </div>

        <button type="submit" id="saveChanges" class="main-button" style="display: none;">Сохранить</button>
    </form>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
</body>


@section Scripts {
    <script>
        document.getElementById('buttonToSaveChanges').addEventListener('click', function () {
            document.getElementById('saveChanges').click();
        });

        let groupIndex = 1;

        function addGroup() {
            const container = document.getElementById("group-container");
            const index = groupIndex++;
            const group = document.createElement("div");
            group.className = "group-row border p-3 rounded mb-3 position-relative";
            group.id = `groupRow${index}`;

            group.innerHTML = `
                <button type="button" class="btn-close position-absolute top-0 end-0 m-2"
                        onclick="removeGroup(${index})" aria-label="Закрыть"></button>

                <div class="form-floating mb-3 validation" style="margin-top: 15px;">
                    <input name="Groups[${index}].Name"
                           class="form-control"
                           style="border: 1px solid #F7C9D4;"
                           placeholder="Название группы"
                           data-val="true"
                           data-val-required="Название группы - обязательное поле для ввода"
                           data-val-length="Название группы должно быть не более 150 символов"
                           data-val-length-max="150"/>
                    <label style="color: #BABABA;">Название группы</label>
                    <span class="text-danger field-validation-valid"
                          data-valmsg-for="Groups[${index}].Name"
                          data-valmsg-replace="true"></span>
                </div>

                <label>Направление</label>
                        <select name="Groups[${index}].StyleId" class="form-select mb-3"
                                style="border: 1px solid #F7C9D4; height: 50px;" required>
                            ${generateStyleOptions()}
                        </select>

                        <label>Возрастное ограничение</label>
                        <div class="row mb-3">
                            <div class="col">
                                <div class="form-floating">
                                    <input name="Groups[${index}].MinAge" type="number"
                                           class="form-control" style="border: 1px solid #F7C9D4;" placeholder="От" />
                                    <label style="color: #BABABA;">От</label>
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-floating">
                                    <input name="Groups[${index}].MaxAge" type="number"
                                           class="form-control" style="border: 1px solid #F7C9D4;" placeholder="До" />
                                    <label style="color: #BABABA;">До</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-floating mb-3">
                            <textarea name="Groups[${index}].Description" class="form-control"
                                      style="height: 100px; border: 1px solid #F7C9D4;"></textarea>
                            <label style="color: #BABABA;">Описание</label>
                        </div>

                        <div class="schedule-container mb-3"></div>
                        <button type="button" class="btn btn-outline-secondary"
                                onclick="addDayField(this, ${index})">+ Добавить день</button>
            `;

            container.appendChild(group);

            // Правильная инициализация валидации
            const form = $("form");
            form.removeData("validator").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);
        }

        function removeGroup(index) {
            const group = document.getElementById(`groupRow${index}`);
            if (group && confirm('Вы уверены, что хотите удалить эту группу?')) {
                group.remove();
                renumberGroups();
            }
        }

        function renumberGroups() {
            const groupContainer = document.getElementById("group-container");
            const groups = groupContainer.querySelectorAll('.group-row');

            groups.forEach((group, newIndex) => {
                group.id = `groupRow${newIndex}`;

                // Название группы
                const nameInput = group.querySelector('input[name$=".Name"]');
                if (nameInput) nameInput.name = `Groups[${newIndex}].Name`;

                // Направление (select)
                const styleSelect = group.querySelector('select[name$=".StyleId"]');
                if (styleSelect) styleSelect.name = `Groups[${newIndex}].StyleId`;

                // Возраст
                const minAge = group.querySelector('input[name$=".MinAge"]');
                const maxAge = group.querySelector('input[name$=".MaxAge"]');
                if (minAge) minAge.name = `Groups[${newIndex}].MinAge`;
                if (maxAge) maxAge.name = `Groups[${newIndex}].MaxAge`;

                // Описание
                const description = group.querySelector('textarea[name$=".Description"]');
                if (description) description.name = `Groups[${newIndex}].Description`;

                // Расписание
                const scheduleContainer = group.querySelector('.schedule-container');
                const scheduleRows = scheduleContainer?.children ?? [];
                for (let i = 0; i < scheduleRows.length; i++) {
                    const row = scheduleRows[i];
                    const selects = row.querySelectorAll('select, input');
                    selects.forEach(input => {
                        if (input.name.includes('.DayOfWeekId')) {
                            input.name = `Groups[${newIndex}].Schedule[${i}].DayOfWeekId`;
                        }
                        if (input.name.includes('.BeginTime')) {
                            input.name = `Groups[${newIndex}].Schedule[${i}].BeginTime`;
                        }
                        if (input.name.includes('.EndTime')) {
                            input.name = `Groups[${newIndex}].Schedule[${i}].EndTime`;
                        }
                    });
                }

                // Обновим onclick на кнопке удаления расписания
                const scheduleButtons = group.querySelectorAll('.schedule-container button');
                scheduleButtons.forEach(btn => {
                    btn.setAttribute('onclick', `this.parentElement.remove(); renumberSchedule(this.closest('.group-row'));`);
                });

                // Обновим onclick на кнопке "+ Добавить день"
                const addDayBtn = group.querySelector('button.btn-outline-secondary');
                if (addDayBtn) {
                    addDayBtn.setAttribute('onclick', `addDayField(this, ${newIndex})`);
                }

                // Обновим кнопку удаления группы
                const closeBtn = group.querySelector('button.btn-close');
                if (closeBtn) {
                    closeBtn.setAttribute('onclick', `removeGroup(${newIndex})`);
                }
            });

            // Обновим глобальный groupIndex
            groupIndex = groups.length;
        }

        function generateStyleOptions() {
            const styles = @Html.Raw(Json.Serialize(Model.Styles));
            return styles.map(s =>
                `<option value="${s.idStyle}">
                            ${s.nameEng ?? ''}${s.nameEng && s.nameRus ? ' (' : ''}${s.nameRus ?? ''}${s.nameEng && s.nameRus ? ')' : ''}
                        </option>`
            ).join('');
        }

        function addDayField(button, groupIdx) {
            const container = button.closest('.group-row').querySelector('.schedule-container');
            const newIndex = container.children.length; // Новый индекс = количество существующих элементов

            const row = document.createElement("div");
            row.className = "d-flex align-items-center mb-2";
            row.innerHTML = `
                <select name="Groups[${groupIdx}].Schedule[${newIndex}].DayOfWeekId"
                        class="form-select me-2" style="width: 25%; border: 1px solid #F7C9D4;" required>
                    ${generateWeekDayOptions()}
                </select>

                <input name="Groups[${groupIdx}].Schedule[${newIndex}].BeginTime" type="time"
                       class="form-control me-2" style="width: 25%; border: 1px solid #F7C9D4;" required />
                <input name="Groups[${groupIdx}].Schedule[${newIndex}].EndTime" type="time"
                       class="form-control me-2" style="width: 25%; border: 1px solid #F7C9D4;" required />
                <button type="button" class="btn btn-danger"
                        onclick="this.parentElement.remove()">Удалить</button>
            `;

            container.appendChild(row);
        }

        function generateWeekDayOptions() {
            const weekDays = @Html.Raw(Json.Serialize(Model.WeekDays));
            return weekDays.map(d =>
                `<option value="${d.idDay}">${d.name}</option>`
            ).join('');
        }

        function removeDayField(button, groupIdx) {
            const row = button.closest('div');
            row.remove();
            reindexDayFields(groupIdx); // Переиндексация после удаления
        }

        function reindexDayFields(groupIdx) {
            const container = document.querySelector(`#groupRow${groupIdx} .schedule-container`);
            const rows = container.querySelectorAll('div.d-flex');

            rows.forEach((row, index) => {
                const selects = row.querySelectorAll('select');
                const inputs = row.querySelectorAll('input');

                // Обновляем индексы в name
                selects.forEach(select => {
                    select.name = select.name.replace(
                        /Groups\[\d+\]\.Schedule\[\d+\]/,
                        `Groups[${groupIdx}].Schedule[${index}]`
                    );
                });

                inputs.forEach(input => {
                    input.name = input.name.replace(
                        /Groups\[\d+\]\.Schedule\[\d+\]/,
                        `Groups[${groupIdx}].Schedule[${index}]`
                    );
                });
            });
        }

    </script>
}