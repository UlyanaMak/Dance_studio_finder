@model DanceStudioFinder.ViewModels.CreatePricesStudioViewModel 
@{
    ViewData["Title"] = "Добавление цен студии";
}
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Поиск танцевальных студий</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/adminStudio.css" asp-append-version="true" />
</head>

@section AdminInfo {
    @($"Администратор: {Model.Admin.Name} {Model.Admin.Surname}")
    <button type="button" id="deleteAdmin" class="main-button">
        Удалить администратора
    </button>
}
@section HeaderButtons { 
    <!--Кнопка сохранения, нажимает сохранение в форме-->
    <button type="button" id="buttonToSaveChanges" class="main-button"> 
        Далее
    </button>
    <!--Выход на главную страницу-->
    <input class="main-button" type="submit" onclick="location.href ='@Url.Action("Index", "Home")'" value="Выйти" />
}
<body>
    <form class="needs-validation" novalidate asp-controller="AdminStudio" asp-action="CreatePricesStudio" method="post">
        <input type="hidden" asp-for="Admin.IdAdmin" />  <!--Скрытое поле для сохраненя id админа-->
        <input type="hidden" asp-for="DanceStudio.IdStudio"/>  <!--Скрытое поле для сохраненя инофрмации о студии-->
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="container-fluid px-3">

            <!--Заполнение (и добавление) цен-->
            <span class="field-title">Цены</span>
            <div id="price-container" class="mb-3">
                <!-- Первое обязательное поле (без кнопки удаления) -->
                <div class="row g-2 align-items-center mb-2 price-row" id="priceRow0">
                    <div class="col-4">
                        <div class="form-floating mb-3 validation">
                            <input asp-for="Prices[0].Price1" type="text" value="" style="border: 1px solid #F7C9D4;" class="form-control price-input" placeholder="Цена">
                            <label style="color: #BABABA;">Цена</label>
                            <span asp-validation-for="Prices[0].Price1" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="form-floating mb-3 validation">
                            <input asp-for="Prices[0].Description" type="text" style="border: 1px solid #F7C9D4;" class="form-control description-input" placeholder="Описание" >
                            <label style="color: #BABABA;">Описание</label>
                            <span asp-validation-for="Prices[0].Description" class="text-danger"></span>
                        </div>
                    </div>
                    <!-- Нет кнопки удаления для первого поля -->
                </div>
            </div>

            <!-- Кнопка добавления новых полей -->
            <button type="button" class="btn btn-outline-primary" onclick="addPriceField()">+ Добавить цену</button>
            <input type="hidden" id="pricesData" name="PricesData" />
        </div>
        <!--Невидимая кнопка для активации валидации данных-->
        <button type="submit" id="saveChanges" class="main-button" style="display: none;">Сохранить</button>
    </form>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>

</body>
@section Scripts {
    <script>
        document.getElementById('buttonToSaveChanges').addEventListener('click', function () {
            document.getElementById('saveChanges').click();
        });

        let priceIndex = @(Model.Prices?.Count ?? 1); // Начинаем с текущего количества цен

        function addPriceField() {
            const container = document.getElementById("price-container");
            const newIndex = priceIndex++;

            const row = document.createElement("div");
            row.className = "row g-2 align-items-center mb-2 price-row";
            row.id = `priceRow${newIndex}`;

            row.innerHTML = `
                <div class="col-4">
                    <div class="form-floating mb-3 validation">
                        <input name="Prices[${newIndex}].Price1"
                               type="number"
                               min="0"
                               max="10000"
                               style="border: 1px solid #F7C9D4;"
                               class="form-control price-input"
                               placeholder="Цена"
                               data-val="true"
                               data-val-required="Цена - поле обязательное для заполнения"
                               data-val-range="Стоимость занятия должна быть от 0 - бесплатно - до 10 000 рублей"
                               data-val-range-min="0"
                               data-val-range-max="10000"
                               data-val-number="Поле должно содержать числовое значение">
                        <label style="color: #BABABA;">Цена</label>
                        <span class="text-danger field-validation-valid"
                              data-valmsg-for="Prices[${newIndex}].Price1"
                              data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="col-6">
                    <div class="form-floating mb-3 validation">
                        <input name="Prices[${newIndex}].Description"
                               type="text"
                               style="border: 1px solid #F7C9D4;"
                               class="form-control description-input"
                               placeholder="Описание"
                               data-val="true"
                               data-val-required="Описание цены - поле обязательное для заполнения"
                               data-val-length="Описание типа цены не должно превышать 500 символов"
                               data-val-length-max="500">
                        <label style="color: #BABABA;">Описание</label>
                        <span class="text-danger field-validation-valid"
                              data-valmsg-for="Prices[${newIndex}].Description"
                              data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="col-2 d-flex align-items-center">
                    <button type="button" class="btn btn-danger btn-sm"
                            onclick="removePriceField('priceRow${newIndex}')">
                        Удалить
                    </button>
                </div>
            `;

            container.appendChild(row);

            // Переинициализация валидации
            const form = $("form");
            form.removeData("validator").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);
        }

        function removePriceField(rowId) {
            const row = document.getElementById(rowId);
            if (row) {
                row.remove();

                // После удаления переиндексируем оставшиеся поля
                reindexPriceFields();
            }
        }

        function reindexPriceFields() {
            const rows = document.querySelectorAll('#price-container .price-row');
            let currentIndex = 0;

            rows.forEach(row => {
                const inputs = row.querySelectorAll('input[data-val="true"]');
                const spans = row.querySelectorAll('span[data-valmsg-for]');

                // Обновляем индексы в именах полей
                inputs.forEach(input => {
                    input.name = input.name.replace(/Prices\[\d+\]/, `Prices[${currentIndex}]`);
                });

                // Обновляем индексы в сообщениях об ошибках
                spans.forEach(span => {
                    span.setAttribute('data-valmsg-for',
                        span.getAttribute('data-valmsg-for').replace(/Prices\[\d+\]/, `Prices[${currentIndex}]`));
                });

                // Обновляем ID строки
                row.id = `priceRow${currentIndex}`;

                currentIndex++;
            });

            // Обновляем глобальный индекс
            priceIndex = currentIndex;
        }
    </script>

}
